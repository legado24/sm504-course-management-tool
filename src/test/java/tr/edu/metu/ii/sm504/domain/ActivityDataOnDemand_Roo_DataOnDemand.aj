// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tr.edu.metu.ii.sm504.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import tr.edu.metu.ii.sm504.domain.Activity;
import tr.edu.metu.ii.sm504.domain.ActivityDataOnDemand;
import tr.edu.metu.ii.sm504.domain.User;
import tr.edu.metu.ii.sm504.domain.UserDataOnDemand;

privileged aspect ActivityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ActivityDataOnDemand: @Component;
    
    private Random ActivityDataOnDemand.rnd = new SecureRandom();
    
    private List<Activity> ActivityDataOnDemand.data;
    
    @Autowired
    private UserDataOnDemand ActivityDataOnDemand.userDataOnDemand;
    
    public Activity ActivityDataOnDemand.getNewTransientActivity(int index) {
        Activity obj = new Activity();
        setCreatedBy(obj, index);
        setCreationTime(obj, index);
        setDescription(obj, index);
        setDueDate(obj, index);
        setTitle(obj, index);
        setUpdateTime(obj, index);
        setUpdatedBy(obj, index);
        return obj;
    }
    
    public void ActivityDataOnDemand.setCreatedBy(Activity obj, int index) {
        User createdBy = userDataOnDemand.getRandomUser();
        obj.setCreatedBy(createdBy);
    }
    
    public void ActivityDataOnDemand.setCreationTime(Activity obj, int index) {
        Date creationTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationTime(creationTime);
    }
    
    public void ActivityDataOnDemand.setDescription(Activity obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ActivityDataOnDemand.setDueDate(Activity obj, int index) {
        Date dueDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDueDate(dueDate);
    }
    
    public void ActivityDataOnDemand.setTitle(Activity obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public void ActivityDataOnDemand.setUpdateTime(Activity obj, int index) {
        Date updateTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdateTime(updateTime);
    }
    
    public void ActivityDataOnDemand.setUpdatedBy(Activity obj, int index) {
        User updatedBy = userDataOnDemand.getRandomUser();
        obj.setUpdatedBy(updatedBy);
    }
    
    public Activity ActivityDataOnDemand.getSpecificActivity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Activity obj = data.get(index);
        Long id = obj.getId();
        return Activity.findActivity(id);
    }
    
    public Activity ActivityDataOnDemand.getRandomActivity() {
        init();
        Activity obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Activity.findActivity(id);
    }
    
    public boolean ActivityDataOnDemand.modifyActivity(Activity obj) {
        return false;
    }
    
    public void ActivityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Activity.findActivityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Activity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Activity>();
        for (int i = 0; i < 10; i++) {
            Activity obj = getNewTransientActivity(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
