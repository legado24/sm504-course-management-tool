// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tr.edu.metu.ii.sm504.jsf;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import tr.edu.metu.ii.sm504.domain.Course;
import tr.edu.metu.ii.sm504.domain.ProjectTeam;
import tr.edu.metu.ii.sm504.domain.Review;
import tr.edu.metu.ii.sm504.domain.Student;
import tr.edu.metu.ii.sm504.domain.Submission;
import tr.edu.metu.ii.sm504.domain.User;
import tr.edu.metu.ii.sm504.jsf.ProjectTeamBean;
import tr.edu.metu.ii.sm504.jsf.converter.CourseConverter;
import tr.edu.metu.ii.sm504.jsf.converter.UserConverter;

privileged aspect ProjectTeamBean_Roo_ManagedBean {
    
    declare @type: ProjectTeamBean: @ManagedBean(name = "projectTeamBean");
    
    declare @type: ProjectTeamBean: @SessionScoped;
    
    private String ProjectTeamBean.name = "ProjectTeams";
    
    private ProjectTeam ProjectTeamBean.projectTeam;
    
    private List<ProjectTeam> ProjectTeamBean.allProjectTeams;
    
    private boolean ProjectTeamBean.dataVisible = false;
    
    private List<String> ProjectTeamBean.columns;
    
    private HtmlPanelGrid ProjectTeamBean.createPanelGrid;
    
    private HtmlPanelGrid ProjectTeamBean.editPanelGrid;
    
    private HtmlPanelGrid ProjectTeamBean.viewPanelGrid;
    
    private boolean ProjectTeamBean.createDialogVisible = false;
    
    private List<Student> ProjectTeamBean.selectedStudents;
    
    private List<Submission> ProjectTeamBean.selectedSubmissions;
    
    private List<Review> ProjectTeamBean.selectedReviews;
    
    @PostConstruct
    public void ProjectTeamBean.init() {
        columns = new ArrayList<String>();
        columns.add("updateTime");
        columns.add("creationTime");
    }
    
    public String ProjectTeamBean.getName() {
        return name;
    }
    
    public List<String> ProjectTeamBean.getColumns() {
        return columns;
    }
    
    public List<ProjectTeam> ProjectTeamBean.getAllProjectTeams() {
        return allProjectTeams;
    }
    
    public void ProjectTeamBean.setAllProjectTeams(List<ProjectTeam> allProjectTeams) {
        this.allProjectTeams = allProjectTeams;
    }
    
    public String ProjectTeamBean.findAllProjectTeams() {
        allProjectTeams = ProjectTeam.findAllProjectTeams();
        dataVisible = !allProjectTeams.isEmpty();
        return null;
    }
    
    public boolean ProjectTeamBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ProjectTeamBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ProjectTeamBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ProjectTeamBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ProjectTeamBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ProjectTeamBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ProjectTeamBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void ProjectTeamBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ProjectTeamBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeCreateOutput.setId("updateTimeCreateOutput");
        updateTimeCreateOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeCreateOutput);
        
        Calendar updateTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeCreateInput.setId("updateTimeCreateInput");
        updateTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.updateTime}", Date.class));
        updateTimeCreateInput.setNavigator(true);
        updateTimeCreateInput.setEffect("slideDown");
        updateTimeCreateInput.setPattern("dd/MM/yyyy");
        updateTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeCreateInput);
        
        Message updateTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeCreateInputMessage.setId("updateTimeCreateInputMessage");
        updateTimeCreateInputMessage.setFor("updateTimeCreateInput");
        updateTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeCreateInputMessage);
        
        HtmlOutputText updatedByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.updatedBy}", User.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{projectTeamBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByCreateInput.setConverter(new UserConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        HtmlOutputText creationTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeCreateOutput.setId("creationTimeCreateOutput");
        creationTimeCreateOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeCreateOutput);
        
        Calendar creationTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeCreateInput.setId("creationTimeCreateInput");
        creationTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.creationTime}", Date.class));
        creationTimeCreateInput.setNavigator(true);
        creationTimeCreateInput.setEffect("slideDown");
        creationTimeCreateInput.setPattern("dd/MM/yyyy");
        creationTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeCreateInput);
        
        Message creationTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeCreateInputMessage.setId("creationTimeCreateInputMessage");
        creationTimeCreateInputMessage.setFor("creationTimeCreateInput");
        creationTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.createdBy}", User.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{projectTeamBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByCreateInput.setConverter(new UserConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        HtmlOutputText studentsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsCreateOutput.setId("studentsCreateOutput");
        studentsCreateOutput.setValue("Students:   ");
        htmlPanelGrid.getChildren().add(studentsCreateOutput);
        
        HtmlOutputText studentsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsCreateInput.setId("studentsCreateInput");
        studentsCreateInput.setValue("This relationship is managed from the Student side");
        htmlPanelGrid.getChildren().add(studentsCreateInput);
        
        Message studentsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentsCreateInputMessage.setId("studentsCreateInputMessage");
        studentsCreateInputMessage.setFor("studentsCreateInput");
        studentsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentsCreateInputMessage);
        
        HtmlOutputText courseCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        courseCreateOutput.setId("courseCreateOutput");
        courseCreateOutput.setValue("Course:   ");
        htmlPanelGrid.getChildren().add(courseCreateOutput);
        
        AutoComplete courseCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        courseCreateInput.setId("courseCreateInput");
        courseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.course}", Course.class));
        courseCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{projectTeamBean.completeCourse}", List.class, new Class[] { String.class }));
        courseCreateInput.setDropdown(true);
        courseCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "course", String.class));
        courseCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{course.updateTime} #{course.creationTime} #{course.name} #{course.code}", String.class));
        courseCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{course}", Course.class));
        courseCreateInput.setConverter(new CourseConverter());
        courseCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(courseCreateInput);
        
        Message courseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        courseCreateInputMessage.setId("courseCreateInputMessage");
        courseCreateInputMessage.setFor("courseCreateInput");
        courseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(courseCreateInputMessage);
        
        HtmlOutputText submissionsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionsCreateOutput.setId("submissionsCreateOutput");
        submissionsCreateOutput.setValue("Submissions:   ");
        htmlPanelGrid.getChildren().add(submissionsCreateOutput);
        
        HtmlOutputText submissionsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionsCreateInput.setId("submissionsCreateInput");
        submissionsCreateInput.setValue("This relationship is managed from the Submission side");
        htmlPanelGrid.getChildren().add(submissionsCreateInput);
        
        Message submissionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        submissionsCreateInputMessage.setId("submissionsCreateInputMessage");
        submissionsCreateInputMessage.setFor("submissionsCreateInput");
        submissionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(submissionsCreateInputMessage);
        
        HtmlOutputText reviewsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        reviewsCreateOutput.setId("reviewsCreateOutput");
        reviewsCreateOutput.setValue("Reviews:   ");
        htmlPanelGrid.getChildren().add(reviewsCreateOutput);
        
        HtmlOutputText reviewsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        reviewsCreateInput.setId("reviewsCreateInput");
        reviewsCreateInput.setValue("This relationship is managed from the Review side");
        htmlPanelGrid.getChildren().add(reviewsCreateInput);
        
        Message reviewsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        reviewsCreateInputMessage.setId("reviewsCreateInputMessage");
        reviewsCreateInputMessage.setFor("reviewsCreateInput");
        reviewsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(reviewsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProjectTeamBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeEditOutput.setId("updateTimeEditOutput");
        updateTimeEditOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeEditOutput);
        
        Calendar updateTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeEditInput.setId("updateTimeEditInput");
        updateTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.updateTime}", Date.class));
        updateTimeEditInput.setNavigator(true);
        updateTimeEditInput.setEffect("slideDown");
        updateTimeEditInput.setPattern("dd/MM/yyyy");
        updateTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeEditInput);
        
        Message updateTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeEditInputMessage.setId("updateTimeEditInputMessage");
        updateTimeEditInputMessage.setFor("updateTimeEditInput");
        updateTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeEditInputMessage);
        
        HtmlOutputText updatedByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.updatedBy}", User.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{projectTeamBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByEditInput.setConverter(new UserConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        HtmlOutputText creationTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeEditOutput.setId("creationTimeEditOutput");
        creationTimeEditOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeEditOutput);
        
        Calendar creationTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeEditInput.setId("creationTimeEditInput");
        creationTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.creationTime}", Date.class));
        creationTimeEditInput.setNavigator(true);
        creationTimeEditInput.setEffect("slideDown");
        creationTimeEditInput.setPattern("dd/MM/yyyy");
        creationTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeEditInput);
        
        Message creationTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeEditInputMessage.setId("creationTimeEditInputMessage");
        creationTimeEditInputMessage.setFor("creationTimeEditInput");
        creationTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.createdBy}", User.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{projectTeamBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByEditInput.setConverter(new UserConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        HtmlOutputText studentsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsEditOutput.setId("studentsEditOutput");
        studentsEditOutput.setValue("Students:   ");
        htmlPanelGrid.getChildren().add(studentsEditOutput);
        
        HtmlOutputText studentsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsEditInput.setId("studentsEditInput");
        studentsEditInput.setValue("This relationship is managed from the Student side");
        htmlPanelGrid.getChildren().add(studentsEditInput);
        
        Message studentsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentsEditInputMessage.setId("studentsEditInputMessage");
        studentsEditInputMessage.setFor("studentsEditInput");
        studentsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentsEditInputMessage);
        
        HtmlOutputText courseEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        courseEditOutput.setId("courseEditOutput");
        courseEditOutput.setValue("Course:   ");
        htmlPanelGrid.getChildren().add(courseEditOutput);
        
        AutoComplete courseEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        courseEditInput.setId("courseEditInput");
        courseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.course}", Course.class));
        courseEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{projectTeamBean.completeCourse}", List.class, new Class[] { String.class }));
        courseEditInput.setDropdown(true);
        courseEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "course", String.class));
        courseEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{course.updateTime} #{course.creationTime} #{course.name} #{course.code}", String.class));
        courseEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{course}", Course.class));
        courseEditInput.setConverter(new CourseConverter());
        courseEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(courseEditInput);
        
        Message courseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        courseEditInputMessage.setId("courseEditInputMessage");
        courseEditInputMessage.setFor("courseEditInput");
        courseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(courseEditInputMessage);
        
        HtmlOutputText submissionsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionsEditOutput.setId("submissionsEditOutput");
        submissionsEditOutput.setValue("Submissions:   ");
        htmlPanelGrid.getChildren().add(submissionsEditOutput);
        
        HtmlOutputText submissionsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionsEditInput.setId("submissionsEditInput");
        submissionsEditInput.setValue("This relationship is managed from the Submission side");
        htmlPanelGrid.getChildren().add(submissionsEditInput);
        
        Message submissionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        submissionsEditInputMessage.setId("submissionsEditInputMessage");
        submissionsEditInputMessage.setFor("submissionsEditInput");
        submissionsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(submissionsEditInputMessage);
        
        HtmlOutputText reviewsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        reviewsEditOutput.setId("reviewsEditOutput");
        reviewsEditOutput.setValue("Reviews:   ");
        htmlPanelGrid.getChildren().add(reviewsEditOutput);
        
        HtmlOutputText reviewsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        reviewsEditInput.setId("reviewsEditInput");
        reviewsEditInput.setValue("This relationship is managed from the Review side");
        htmlPanelGrid.getChildren().add(reviewsEditInput);
        
        Message reviewsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        reviewsEditInputMessage.setId("reviewsEditInputMessage");
        reviewsEditInputMessage.setFor("reviewsEditInput");
        reviewsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(reviewsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProjectTeamBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeLabel.setId("updateTimeLabel");
        updateTimeLabel.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeLabel);
        
        HtmlOutputText updateTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.updateTime}", Date.class));
        DateTimeConverter updateTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updateTimeValueConverter.setPattern("dd/MM/yyyy");
        updateTimeValue.setConverter(updateTimeValueConverter);
        htmlPanelGrid.getChildren().add(updateTimeValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.updatedBy}", User.class));
        updatedByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText creationTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeLabel.setId("creationTimeLabel");
        creationTimeLabel.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeLabel);
        
        HtmlOutputText creationTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.creationTime}", Date.class));
        DateTimeConverter creationTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationTimeValueConverter.setPattern("dd/MM/yyyy");
        creationTimeValue.setConverter(creationTimeValueConverter);
        htmlPanelGrid.getChildren().add(creationTimeValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.createdBy}", User.class));
        createdByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText studentsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsLabel.setId("studentsLabel");
        studentsLabel.setValue("Students:   ");
        htmlPanelGrid.getChildren().add(studentsLabel);
        
        HtmlOutputText studentsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsValue.setId("studentsValue");
        studentsValue.setValue("This relationship is managed from the Student side");
        htmlPanelGrid.getChildren().add(studentsValue);
        
        HtmlOutputText courseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        courseLabel.setId("courseLabel");
        courseLabel.setValue("Course:   ");
        htmlPanelGrid.getChildren().add(courseLabel);
        
        HtmlOutputText courseValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        courseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{projectTeamBean.projectTeam.course}", Course.class));
        courseValue.setConverter(new CourseConverter());
        htmlPanelGrid.getChildren().add(courseValue);
        
        HtmlOutputText submissionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionsLabel.setId("submissionsLabel");
        submissionsLabel.setValue("Submissions:   ");
        htmlPanelGrid.getChildren().add(submissionsLabel);
        
        HtmlOutputText submissionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionsValue.setId("submissionsValue");
        submissionsValue.setValue("This relationship is managed from the Submission side");
        htmlPanelGrid.getChildren().add(submissionsValue);
        
        HtmlOutputText reviewsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        reviewsLabel.setId("reviewsLabel");
        reviewsLabel.setValue("Reviews:   ");
        htmlPanelGrid.getChildren().add(reviewsLabel);
        
        HtmlOutputText reviewsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        reviewsValue.setId("reviewsValue");
        reviewsValue.setValue("This relationship is managed from the Review side");
        htmlPanelGrid.getChildren().add(reviewsValue);
        
        return htmlPanelGrid;
    }
    
    public ProjectTeam ProjectTeamBean.getProjectTeam() {
        if (projectTeam == null) {
            projectTeam = new ProjectTeam();
        }
        return projectTeam;
    }
    
    public void ProjectTeamBean.setProjectTeam(ProjectTeam projectTeam) {
        this.projectTeam = projectTeam;
    }
    
    public List<User> ProjectTeamBean.completeUpdatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<User> ProjectTeamBean.completeCreatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<Student> ProjectTeamBean.getSelectedStudents() {
        return selectedStudents;
    }
    
    public void ProjectTeamBean.setSelectedStudents(List<Student> selectedStudents) {
        if (selectedStudents != null) {
            projectTeam.setStudents(new HashSet<Student>(selectedStudents));
        }
        this.selectedStudents = selectedStudents;
    }
    
    public List<Course> ProjectTeamBean.completeCourse(String query) {
        List<Course> suggestions = new ArrayList<Course>();
        for (Course course : Course.findAllCourses()) {
            String courseStr = String.valueOf(course.getUpdateTime() +  " "  + course.getCreationTime() +  " "  + course.getName() +  " "  + course.getCode());
            if (courseStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(course);
            }
        }
        return suggestions;
    }
    
    public List<Submission> ProjectTeamBean.getSelectedSubmissions() {
        return selectedSubmissions;
    }
    
    public void ProjectTeamBean.setSelectedSubmissions(List<Submission> selectedSubmissions) {
        if (selectedSubmissions != null) {
            projectTeam.setSubmissions(new HashSet<Submission>(selectedSubmissions));
        }
        this.selectedSubmissions = selectedSubmissions;
    }
    
    public List<Review> ProjectTeamBean.getSelectedReviews() {
        return selectedReviews;
    }
    
    public void ProjectTeamBean.setSelectedReviews(List<Review> selectedReviews) {
        if (selectedReviews != null) {
            projectTeam.setReviews(new HashSet<Review>(selectedReviews));
        }
        this.selectedReviews = selectedReviews;
    }
    
    public String ProjectTeamBean.onEdit() {
        if (projectTeam != null && projectTeam.getStudents() != null) {
            selectedStudents = new ArrayList<Student>(projectTeam.getStudents());
        }
        if (projectTeam != null && projectTeam.getSubmissions() != null) {
            selectedSubmissions = new ArrayList<Submission>(projectTeam.getSubmissions());
        }
        if (projectTeam != null && projectTeam.getReviews() != null) {
            selectedReviews = new ArrayList<Review>(projectTeam.getReviews());
        }
        return null;
    }
    
    public boolean ProjectTeamBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ProjectTeamBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ProjectTeamBean.displayList() {
        createDialogVisible = false;
        findAllProjectTeams();
        return "projectTeam";
    }
    
    public String ProjectTeamBean.displayCreateDialog() {
        projectTeam = new ProjectTeam();
        createDialogVisible = true;
        return "projectTeam";
    }
    
    public String ProjectTeamBean.persist() {
        String message = "";
        if (projectTeam.getId() != null) {
            projectTeam.merge();
            message = "Successfully updated";
        } else {
            projectTeam.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProjectTeams();
    }
    
    public String ProjectTeamBean.delete() {
        projectTeam.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProjectTeams();
    }
    
    public void ProjectTeamBean.reset() {
        projectTeam = null;
        selectedStudents = null;
        selectedSubmissions = null;
        selectedReviews = null;
        createDialogVisible = false;
    }
    
    public void ProjectTeamBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
