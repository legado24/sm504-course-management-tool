// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tr.edu.metu.ii.sm504.jsf;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.component.filedownload.FileDownloadActionListener;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import tr.edu.metu.ii.sm504.domain.Role;
import tr.edu.metu.ii.sm504.domain.User;
import tr.edu.metu.ii.sm504.jsf.UserBean;
import tr.edu.metu.ii.sm504.jsf.converter.RoleConverter;
import tr.edu.metu.ii.sm504.jsf.converter.UserConverter;

privileged aspect UserBean_Roo_ManagedBean {
    
    declare @type: UserBean: @ManagedBean(name = "userBean");
    
    declare @type: UserBean: @SessionScoped;
    
    private String UserBean.name = "Users";
    
    private User UserBean.user;
    
    private List<User> UserBean.allUsers;
    
    private boolean UserBean.dataVisible = false;
    
    private List<String> UserBean.columns;
    
    private HtmlPanelGrid UserBean.createPanelGrid;
    
    private HtmlPanelGrid UserBean.editPanelGrid;
    
    private HtmlPanelGrid UserBean.viewPanelGrid;
    
    private boolean UserBean.createDialogVisible = false;
    
    private List<Role> UserBean.selectedRoles;
    
    @PostConstruct
    public void UserBean.init() {
        columns = new ArrayList<String>();
        columns.add("updateTime");
        columns.add("creationTime");
        columns.add("username");
        columns.add("name");
        columns.add("surname");
    }
    
    public String UserBean.getName() {
        return name;
    }
    
    public List<String> UserBean.getColumns() {
        return columns;
    }
    
    public List<User> UserBean.getAllUsers() {
        return allUsers;
    }
    
    public void UserBean.setAllUsers(List<User> allUsers) {
        this.allUsers = allUsers;
    }
    
    public String UserBean.findAllUsers() {
        allUsers = User.findAllUsers();
        dataVisible = !allUsers.isEmpty();
        return null;
    }
    
    public boolean UserBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UserBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UserBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UserBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UserBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void UserBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeCreateOutput.setId("updateTimeCreateOutput");
        updateTimeCreateOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeCreateOutput);
        
        Calendar updateTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeCreateInput.setId("updateTimeCreateInput");
        updateTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.updateTime}", Date.class));
        updateTimeCreateInput.setNavigator(true);
        updateTimeCreateInput.setEffect("slideDown");
        updateTimeCreateInput.setPattern("dd/MM/yyyy");
        updateTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeCreateInput);
        
        Message updateTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeCreateInputMessage.setId("updateTimeCreateInputMessage");
        updateTimeCreateInputMessage.setFor("updateTimeCreateInput");
        updateTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeCreateInputMessage);
        
        HtmlOutputText updatedByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.updatedBy}", User.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByCreateInput.setConverter(new UserConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        HtmlOutputText creationTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeCreateOutput.setId("creationTimeCreateOutput");
        creationTimeCreateOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeCreateOutput);
        
        Calendar creationTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeCreateInput.setId("creationTimeCreateInput");
        creationTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.creationTime}", Date.class));
        creationTimeCreateInput.setNavigator(true);
        creationTimeCreateInput.setEffect("slideDown");
        creationTimeCreateInput.setPattern("dd/MM/yyyy");
        creationTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeCreateInput);
        
        Message creationTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeCreateInputMessage.setId("creationTimeCreateInputMessage");
        creationTimeCreateInputMessage.setFor("creationTimeCreateInput");
        creationTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.createdBy}", User.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByCreateInput.setConverter(new UserConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        HtmlOutputText usernameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameCreateOutput.setId("usernameCreateOutput");
        usernameCreateOutput.setValue("Username: * ");
        htmlPanelGrid.getChildren().add(usernameCreateOutput);
        
        InputText usernameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameCreateInput.setId("usernameCreateInput");
        usernameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.username}", String.class));
        htmlPanelGrid.getChildren().add(usernameCreateInput);
        
        Message usernameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameCreateInputMessage.setId("usernameCreateInputMessage");
        usernameCreateInputMessage.setFor("usernameCreateInput");
        usernameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameCreateInputMessage);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.name}", String.class));
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText surnameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        surnameCreateOutput.setId("surnameCreateOutput");
        surnameCreateOutput.setValue("Surname: * ");
        htmlPanelGrid.getChildren().add(surnameCreateOutput);
        
        InputText surnameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        surnameCreateInput.setId("surnameCreateInput");
        surnameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.surname}", String.class));
        htmlPanelGrid.getChildren().add(surnameCreateInput);
        
        Message surnameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        surnameCreateInputMessage.setId("surnameCreateInputMessage");
        surnameCreateInputMessage.setFor("surnameCreateInput");
        surnameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(surnameCreateInputMessage);
        
        HtmlOutputText passwordCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password: * ");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputText passwordCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        HtmlOutputText emailCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.email}", String.class));
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        HtmlOutputText addressCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressCreateOutput.setId("addressCreateOutput");
        addressCreateOutput.setValue("Address:   ");
        htmlPanelGrid.getChildren().add(addressCreateOutput);
        
        InputText addressCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressCreateInput.setId("addressCreateInput");
        addressCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.address}", String.class));
        htmlPanelGrid.getChildren().add(addressCreateInput);
        
        Message addressCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressCreateInputMessage.setId("addressCreateInputMessage");
        addressCreateInputMessage.setFor("addressCreateInput");
        addressCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressCreateInputMessage);
        
        HtmlOutputText dueDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dueDateCreateOutput.setId("dueDateCreateOutput");
        dueDateCreateOutput.setValue("Due Date: * ");
        htmlPanelGrid.getChildren().add(dueDateCreateOutput);
        
        Calendar dueDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dueDateCreateInput.setId("dueDateCreateInput");
        dueDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.dueDate}", Date.class));
        dueDateCreateInput.setNavigator(true);
        dueDateCreateInput.setEffect("slideDown");
        dueDateCreateInput.setPattern("dd/MM/yyyy");
        dueDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(dueDateCreateInput);
        
        Message dueDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dueDateCreateInputMessage.setId("dueDateCreateInputMessage");
        dueDateCreateInputMessage.setFor("dueDateCreateInput");
        dueDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dueDateCreateInputMessage);
        
        HtmlOutputText statusCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status: * ");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        SelectBooleanCheckbox statusCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.status}", Boolean.class));
        statusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        HtmlOutputText photoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        photoCreateOutput.setId("photoCreateOutput");
        photoCreateOutput.setValue("Photo:   ");
        htmlPanelGrid.getChildren().add(photoCreateOutput);
        
        FileUpload photoCreateInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        photoCreateInput.setId("photoCreateInput");
        photoCreateInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{userBean.handleFileUploadForPhoto}", void.class, new Class[] { FileUploadEvent.class }));
        photoCreateInput.setMode("advanced");
        photoCreateInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        photoCreateInput.setUpdate(":growlForm:growl");
        htmlPanelGrid.getChildren().add(photoCreateInput);
        
        Message photoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        photoCreateInputMessage.setId("photoCreateInputMessage");
        photoCreateInputMessage.setFor("photoCreateInput");
        photoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(photoCreateInputMessage);
        
        HtmlOutputText rolesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesCreateOutput.setId("rolesCreateOutput");
        rolesCreateOutput.setValue("Roles: * ");
        htmlPanelGrid.getChildren().add(rolesCreateOutput);
        
        SelectManyMenu rolesCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rolesCreateInput.setId("rolesCreateInput");
        rolesCreateInput.setConverter(new RoleConverter());
        rolesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.selectedRoles}", List.class));
        UISelectItems rolesCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rolesCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{roleBean.allRoles}", List.class));
        rolesCreateInput.setRequired(true);
        rolesCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "role", String.class));
        rolesCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{role}", String.class));
        rolesCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{role}", Role.class));
        rolesCreateInput.getChildren().add(rolesCreateInputItems);
        htmlPanelGrid.getChildren().add(rolesCreateInput);
        
        Message rolesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolesCreateInputMessage.setId("rolesCreateInputMessage");
        rolesCreateInputMessage.setFor("rolesCreateInput");
        rolesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeEditOutput.setId("updateTimeEditOutput");
        updateTimeEditOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeEditOutput);
        
        Calendar updateTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeEditInput.setId("updateTimeEditInput");
        updateTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.updateTime}", Date.class));
        updateTimeEditInput.setNavigator(true);
        updateTimeEditInput.setEffect("slideDown");
        updateTimeEditInput.setPattern("dd/MM/yyyy");
        updateTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeEditInput);
        
        Message updateTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeEditInputMessage.setId("updateTimeEditInputMessage");
        updateTimeEditInputMessage.setFor("updateTimeEditInput");
        updateTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeEditInputMessage);
        
        HtmlOutputText updatedByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.updatedBy}", User.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByEditInput.setConverter(new UserConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        HtmlOutputText creationTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeEditOutput.setId("creationTimeEditOutput");
        creationTimeEditOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeEditOutput);
        
        Calendar creationTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeEditInput.setId("creationTimeEditInput");
        creationTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.creationTime}", Date.class));
        creationTimeEditInput.setNavigator(true);
        creationTimeEditInput.setEffect("slideDown");
        creationTimeEditInput.setPattern("dd/MM/yyyy");
        creationTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeEditInput);
        
        Message creationTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeEditInputMessage.setId("creationTimeEditInputMessage");
        creationTimeEditInputMessage.setFor("creationTimeEditInput");
        creationTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.createdBy}", User.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByEditInput.setConverter(new UserConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        HtmlOutputText usernameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameEditOutput.setId("usernameEditOutput");
        usernameEditOutput.setValue("Username: * ");
        htmlPanelGrid.getChildren().add(usernameEditOutput);
        
        InputText usernameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameEditInput.setId("usernameEditInput");
        usernameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.username}", String.class));
        htmlPanelGrid.getChildren().add(usernameEditInput);
        
        Message usernameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameEditInputMessage.setId("usernameEditInputMessage");
        usernameEditInputMessage.setFor("usernameEditInput");
        usernameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameEditInputMessage);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.name}", String.class));
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText surnameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        surnameEditOutput.setId("surnameEditOutput");
        surnameEditOutput.setValue("Surname: * ");
        htmlPanelGrid.getChildren().add(surnameEditOutput);
        
        InputText surnameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        surnameEditInput.setId("surnameEditInput");
        surnameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.surname}", String.class));
        htmlPanelGrid.getChildren().add(surnameEditInput);
        
        Message surnameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        surnameEditInputMessage.setId("surnameEditInputMessage");
        surnameEditInputMessage.setFor("surnameEditInput");
        surnameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(surnameEditInputMessage);
        
        HtmlOutputText passwordEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password: * ");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputText passwordEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        HtmlOutputText emailEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.email}", String.class));
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        HtmlOutputText addressEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressEditOutput.setId("addressEditOutput");
        addressEditOutput.setValue("Address:   ");
        htmlPanelGrid.getChildren().add(addressEditOutput);
        
        InputText addressEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressEditInput.setId("addressEditInput");
        addressEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.address}", String.class));
        htmlPanelGrid.getChildren().add(addressEditInput);
        
        Message addressEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressEditInputMessage.setId("addressEditInputMessage");
        addressEditInputMessage.setFor("addressEditInput");
        addressEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressEditInputMessage);
        
        HtmlOutputText dueDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dueDateEditOutput.setId("dueDateEditOutput");
        dueDateEditOutput.setValue("Due Date: * ");
        htmlPanelGrid.getChildren().add(dueDateEditOutput);
        
        Calendar dueDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dueDateEditInput.setId("dueDateEditInput");
        dueDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.dueDate}", Date.class));
        dueDateEditInput.setNavigator(true);
        dueDateEditInput.setEffect("slideDown");
        dueDateEditInput.setPattern("dd/MM/yyyy");
        dueDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(dueDateEditInput);
        
        Message dueDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dueDateEditInputMessage.setId("dueDateEditInputMessage");
        dueDateEditInputMessage.setFor("dueDateEditInput");
        dueDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dueDateEditInputMessage);
        
        HtmlOutputText statusEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status: * ");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        SelectBooleanCheckbox statusEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.status}", Boolean.class));
        statusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        HtmlOutputText photoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        photoEditOutput.setId("photoEditOutput");
        photoEditOutput.setValue("Photo:   ");
        htmlPanelGrid.getChildren().add(photoEditOutput);
        
        FileUpload photoEditInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        photoEditInput.setId("photoEditInput");
        photoEditInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{userBean.handleFileUploadForPhoto}", void.class, new Class[] { FileUploadEvent.class }));
        photoEditInput.setMode("advanced");
        photoEditInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        photoEditInput.setUpdate(":growlForm:growl");
        htmlPanelGrid.getChildren().add(photoEditInput);
        
        Message photoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        photoEditInputMessage.setId("photoEditInputMessage");
        photoEditInputMessage.setFor("photoEditInput");
        photoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(photoEditInputMessage);
        
        HtmlOutputText rolesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesEditOutput.setId("rolesEditOutput");
        rolesEditOutput.setValue("Roles: * ");
        htmlPanelGrid.getChildren().add(rolesEditOutput);
        
        SelectManyMenu rolesEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rolesEditInput.setId("rolesEditInput");
        rolesEditInput.setConverter(new RoleConverter());
        rolesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.selectedRoles}", List.class));
        UISelectItems rolesEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rolesEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{roleBean.allRoles}", List.class));
        rolesEditInput.setRequired(true);
        rolesEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "role", String.class));
        rolesEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{role}", String.class));
        rolesEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{role}", Role.class));
        rolesEditInput.getChildren().add(rolesEditInputItems);
        htmlPanelGrid.getChildren().add(rolesEditInput);
        
        Message rolesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolesEditInputMessage.setId("rolesEditInputMessage");
        rolesEditInputMessage.setFor("rolesEditInput");
        rolesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeLabel.setId("updateTimeLabel");
        updateTimeLabel.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeLabel);
        
        HtmlOutputText updateTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.updateTime}", Date.class));
        DateTimeConverter updateTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updateTimeValueConverter.setPattern("dd/MM/yyyy");
        updateTimeValue.setConverter(updateTimeValueConverter);
        htmlPanelGrid.getChildren().add(updateTimeValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.updatedBy}", User.class));
        updatedByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText creationTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeLabel.setId("creationTimeLabel");
        creationTimeLabel.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeLabel);
        
        HtmlOutputText creationTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.creationTime}", Date.class));
        DateTimeConverter creationTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationTimeValueConverter.setPattern("dd/MM/yyyy");
        creationTimeValue.setConverter(creationTimeValueConverter);
        htmlPanelGrid.getChildren().add(creationTimeValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.createdBy}", User.class));
        createdByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText usernameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameLabel.setId("usernameLabel");
        usernameLabel.setValue("Username:   ");
        htmlPanelGrid.getChildren().add(usernameLabel);
        
        HtmlOutputText usernameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameValue.setId("usernameValue");
        usernameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.username}", String.class));
        htmlPanelGrid.getChildren().add(usernameValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText surnameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        surnameLabel.setId("surnameLabel");
        surnameLabel.setValue("Surname:   ");
        htmlPanelGrid.getChildren().add(surnameLabel);
        
        HtmlOutputText surnameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        surnameValue.setId("surnameValue");
        surnameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.surname}", String.class));
        htmlPanelGrid.getChildren().add(surnameValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:   ");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        HtmlOutputText passwordValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText addressLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressLabel.setId("addressLabel");
        addressLabel.setValue("Address:   ");
        htmlPanelGrid.getChildren().add(addressLabel);
        
        HtmlOutputText addressValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressValue.setId("addressValue");
        addressValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.address}", String.class));
        htmlPanelGrid.getChildren().add(addressValue);
        
        HtmlOutputText dueDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dueDateLabel.setId("dueDateLabel");
        dueDateLabel.setValue("Due Date:   ");
        htmlPanelGrid.getChildren().add(dueDateLabel);
        
        HtmlOutputText dueDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dueDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.dueDate}", Date.class));
        DateTimeConverter dueDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dueDateValueConverter.setPattern("dd/MM/yyyy");
        dueDateValue.setConverter(dueDateValueConverter);
        htmlPanelGrid.getChildren().add(dueDateValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:   ");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.status}", String.class));
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText photoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        photoLabel.setId("photoLabel");
        photoLabel.setValue("Photo:   ");
        htmlPanelGrid.getChildren().add(photoLabel);
        
        UIComponent photoValue;
        if (user != null && user.getPhoto() != null && user.getPhoto().length > 0) {
            photoValue = (CommandButton) application.createComponent(CommandButton.COMPONENT_TYPE);
            ((CommandButton) photoValue).addActionListener(new FileDownloadActionListener(expressionFactory.createValueExpression(elContext, "#{userBean.photoStreamedContent}", StreamedContent.class), null));
            ((CommandButton) photoValue).setValue("Download");
            ((CommandButton) photoValue).setAjax(false);
        } else {
            photoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
            ((HtmlOutputText) photoValue).setValue("");
        }
        htmlPanelGrid.getChildren().add(photoValue);
        
        HtmlOutputText rolesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesLabel.setId("rolesLabel");
        rolesLabel.setValue("Roles:   ");
        htmlPanelGrid.getChildren().add(rolesLabel);
        
        SelectManyMenu rolesValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rolesValue.setId("rolesValue");
        rolesValue.setConverter(new RoleConverter());
        rolesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.selectedRoles}", List.class));
        UISelectItems rolesValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rolesValue.setReadonly(true);
        rolesValue.setDisabled(true);
        rolesValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.roles}", Set.class));
        rolesValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "role", String.class));
        rolesValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{role}", String.class));
        rolesValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{role}", Role.class));
        rolesValue.getChildren().add(rolesValueItems);
        htmlPanelGrid.getChildren().add(rolesValue);
        
        return htmlPanelGrid;
    }
    
    public User UserBean.getUser() {
        if (user == null) {
            user = new User();
        }
        return user;
    }
    
    public void UserBean.setUser(User user) {
        this.user = user;
    }
    
    public List<User> UserBean.completeUpdatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<User> UserBean.completeCreatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public void UserBean.handleFileUploadForPhoto(FileUploadEvent event) {
        user.setPhoto(event.getFile().getContents());
        FacesMessage facesMessage = new FacesMessage("Successful", event.getFile().getFileName() + " is uploaded.");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
    }
    
    public StreamedContent UserBean.getPhotoStreamedContent() {
        if (user != null && user.getPhoto() != null) {
            return new DefaultStreamedContent(new ByteArrayInputStream(user.getPhoto()), "image/jpeg", "photo.jpg");
        }
        return new DefaultStreamedContent(new ByteArrayInputStream("".getBytes()));
    }
    
    public List<Role> UserBean.getSelectedRoles() {
        return selectedRoles;
    }
    
    public void UserBean.setSelectedRoles(List<Role> selectedRoles) {
        if (selectedRoles != null) {
            user.setRoles(new HashSet<Role>(selectedRoles));
        }
        this.selectedRoles = selectedRoles;
    }
    
    public String UserBean.onEdit() {
        if (user != null && user.getRoles() != null) {
            selectedRoles = new ArrayList<Role>(user.getRoles());
        }
        return null;
    }
    
    public boolean UserBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UserBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UserBean.displayList() {
        createDialogVisible = false;
        findAllUsers();
        return "user";
    }
    
    public String UserBean.displayCreateDialog() {
        user = new User();
        createDialogVisible = true;
        return "user";
    }
    
    public String UserBean.persist() {
        String message = "";
        if (user.getId() != null) {
            user.merge();
            message = "Successfully updated";
        } else {
            user.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsers();
    }
    
    public String UserBean.delete() {
        user.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsers();
    }
    
    public void UserBean.reset() {
        user = null;
        selectedRoles = null;
        createDialogVisible = false;
    }
    
    public void UserBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
