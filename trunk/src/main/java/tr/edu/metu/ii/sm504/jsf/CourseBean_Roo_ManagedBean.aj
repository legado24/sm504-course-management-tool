// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tr.edu.metu.ii.sm504.jsf;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import tr.edu.metu.ii.sm504.domain.Course;
import tr.edu.metu.ii.sm504.domain.LectureNote;
import tr.edu.metu.ii.sm504.domain.Student;
import tr.edu.metu.ii.sm504.domain.User;
import tr.edu.metu.ii.sm504.jsf.CourseBean;
import tr.edu.metu.ii.sm504.jsf.converter.UserConverter;

privileged aspect CourseBean_Roo_ManagedBean {
    
    declare @type: CourseBean: @ManagedBean(name = "courseBean");
    
    declare @type: CourseBean: @SessionScoped;
    
    private String CourseBean.name = "Courses";
    
    private Course CourseBean.course;
    
    private List<Course> CourseBean.allCourses;
    
    private boolean CourseBean.dataVisible = false;
    
    private List<String> CourseBean.columns;
    
    private HtmlPanelGrid CourseBean.createPanelGrid;
    
    private HtmlPanelGrid CourseBean.editPanelGrid;
    
    private HtmlPanelGrid CourseBean.viewPanelGrid;
    
    private boolean CourseBean.createDialogVisible = false;
    
    private List<LectureNote> CourseBean.selectedLectureNotes;
    
    private List<Student> CourseBean.selectedStudents;
    
    @PostConstruct
    public void CourseBean.init() {
        columns = new ArrayList<String>();
        columns.add("updateTime");
        columns.add("creationTime");
        columns.add("name");
        columns.add("code");
    }
    
    public String CourseBean.getName() {
        return name;
    }
    
    public List<String> CourseBean.getColumns() {
        return columns;
    }
    
    public List<Course> CourseBean.getAllCourses() {
        return allCourses;
    }
    
    public void CourseBean.setAllCourses(List<Course> allCourses) {
        this.allCourses = allCourses;
    }
    
    public String CourseBean.findAllCourses() {
        allCourses = Course.findAllCourses();
        dataVisible = !allCourses.isEmpty();
        return null;
    }
    
    public boolean CourseBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CourseBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CourseBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CourseBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CourseBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void CourseBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeCreateOutput.setId("updateTimeCreateOutput");
        updateTimeCreateOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeCreateOutput);
        
        Calendar updateTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeCreateInput.setId("updateTimeCreateInput");
        updateTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.updateTime}", Date.class));
        updateTimeCreateInput.setNavigator(true);
        updateTimeCreateInput.setEffect("slideDown");
        updateTimeCreateInput.setPattern("dd/MM/yyyy");
        updateTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeCreateInput);
        
        Message updateTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeCreateInputMessage.setId("updateTimeCreateInputMessage");
        updateTimeCreateInputMessage.setFor("updateTimeCreateInput");
        updateTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeCreateInputMessage);
        
        HtmlOutputText updatedByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.updatedBy}", User.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByCreateInput.setConverter(new UserConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        HtmlOutputText creationTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeCreateOutput.setId("creationTimeCreateOutput");
        creationTimeCreateOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeCreateOutput);
        
        Calendar creationTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeCreateInput.setId("creationTimeCreateInput");
        creationTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.creationTime}", Date.class));
        creationTimeCreateInput.setNavigator(true);
        creationTimeCreateInput.setEffect("slideDown");
        creationTimeCreateInput.setPattern("dd/MM/yyyy");
        creationTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeCreateInput);
        
        Message creationTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeCreateInputMessage.setId("creationTimeCreateInputMessage");
        creationTimeCreateInputMessage.setFor("creationTimeCreateInput");
        creationTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.createdBy}", User.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByCreateInput.setConverter(new UserConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.name}", String.class));
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText codeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeCreateOutput.setId("codeCreateOutput");
        codeCreateOutput.setValue("Code:   ");
        htmlPanelGrid.getChildren().add(codeCreateOutput);
        
        InputText codeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeCreateInput.setId("codeCreateInput");
        codeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.code}", String.class));
        htmlPanelGrid.getChildren().add(codeCreateInput);
        
        Message codeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeCreateInputMessage.setId("codeCreateInputMessage");
        codeCreateInputMessage.setFor("codeCreateInput");
        codeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeCreateInputMessage);
        
        HtmlOutputText lectureNotesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lectureNotesCreateOutput.setId("lectureNotesCreateOutput");
        lectureNotesCreateOutput.setValue("Lecture Notes:   ");
        htmlPanelGrid.getChildren().add(lectureNotesCreateOutput);
        
        HtmlOutputText lectureNotesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lectureNotesCreateInput.setId("lectureNotesCreateInput");
        lectureNotesCreateInput.setValue("This relationship is managed from the LectureNote side");
        htmlPanelGrid.getChildren().add(lectureNotesCreateInput);
        
        Message lectureNotesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lectureNotesCreateInputMessage.setId("lectureNotesCreateInputMessage");
        lectureNotesCreateInputMessage.setFor("lectureNotesCreateInput");
        lectureNotesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lectureNotesCreateInputMessage);
        
        HtmlOutputText studentsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsCreateOutput.setId("studentsCreateOutput");
        studentsCreateOutput.setValue("Students:   ");
        htmlPanelGrid.getChildren().add(studentsCreateOutput);
        
        HtmlOutputText studentsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsCreateInput.setId("studentsCreateInput");
        studentsCreateInput.setValue("This relationship is managed from the Student side");
        htmlPanelGrid.getChildren().add(studentsCreateInput);
        
        Message studentsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentsCreateInputMessage.setId("studentsCreateInputMessage");
        studentsCreateInputMessage.setFor("studentsCreateInput");
        studentsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeEditOutput.setId("updateTimeEditOutput");
        updateTimeEditOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeEditOutput);
        
        Calendar updateTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeEditInput.setId("updateTimeEditInput");
        updateTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.updateTime}", Date.class));
        updateTimeEditInput.setNavigator(true);
        updateTimeEditInput.setEffect("slideDown");
        updateTimeEditInput.setPattern("dd/MM/yyyy");
        updateTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeEditInput);
        
        Message updateTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeEditInputMessage.setId("updateTimeEditInputMessage");
        updateTimeEditInputMessage.setFor("updateTimeEditInput");
        updateTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeEditInputMessage);
        
        HtmlOutputText updatedByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.updatedBy}", User.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByEditInput.setConverter(new UserConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        HtmlOutputText creationTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeEditOutput.setId("creationTimeEditOutput");
        creationTimeEditOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeEditOutput);
        
        Calendar creationTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeEditInput.setId("creationTimeEditInput");
        creationTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.creationTime}", Date.class));
        creationTimeEditInput.setNavigator(true);
        creationTimeEditInput.setEffect("slideDown");
        creationTimeEditInput.setPattern("dd/MM/yyyy");
        creationTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeEditInput);
        
        Message creationTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeEditInputMessage.setId("creationTimeEditInputMessage");
        creationTimeEditInputMessage.setFor("creationTimeEditInput");
        creationTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.createdBy}", User.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{courseBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByEditInput.setConverter(new UserConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.name}", String.class));
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText codeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeEditOutput.setId("codeEditOutput");
        codeEditOutput.setValue("Code:   ");
        htmlPanelGrid.getChildren().add(codeEditOutput);
        
        InputText codeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeEditInput.setId("codeEditInput");
        codeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.code}", String.class));
        htmlPanelGrid.getChildren().add(codeEditInput);
        
        Message codeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeEditInputMessage.setId("codeEditInputMessage");
        codeEditInputMessage.setFor("codeEditInput");
        codeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeEditInputMessage);
        
        HtmlOutputText lectureNotesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lectureNotesEditOutput.setId("lectureNotesEditOutput");
        lectureNotesEditOutput.setValue("Lecture Notes:   ");
        htmlPanelGrid.getChildren().add(lectureNotesEditOutput);
        
        HtmlOutputText lectureNotesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lectureNotesEditInput.setId("lectureNotesEditInput");
        lectureNotesEditInput.setValue("This relationship is managed from the LectureNote side");
        htmlPanelGrid.getChildren().add(lectureNotesEditInput);
        
        Message lectureNotesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lectureNotesEditInputMessage.setId("lectureNotesEditInputMessage");
        lectureNotesEditInputMessage.setFor("lectureNotesEditInput");
        lectureNotesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lectureNotesEditInputMessage);
        
        HtmlOutputText studentsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsEditOutput.setId("studentsEditOutput");
        studentsEditOutput.setValue("Students:   ");
        htmlPanelGrid.getChildren().add(studentsEditOutput);
        
        HtmlOutputText studentsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsEditInput.setId("studentsEditInput");
        studentsEditInput.setValue("This relationship is managed from the Student side");
        htmlPanelGrid.getChildren().add(studentsEditInput);
        
        Message studentsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentsEditInputMessage.setId("studentsEditInputMessage");
        studentsEditInputMessage.setFor("studentsEditInput");
        studentsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CourseBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeLabel.setId("updateTimeLabel");
        updateTimeLabel.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeLabel);
        
        HtmlOutputText updateTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.updateTime}", Date.class));
        DateTimeConverter updateTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updateTimeValueConverter.setPattern("dd/MM/yyyy");
        updateTimeValue.setConverter(updateTimeValueConverter);
        htmlPanelGrid.getChildren().add(updateTimeValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.updatedBy}", User.class));
        updatedByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText creationTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeLabel.setId("creationTimeLabel");
        creationTimeLabel.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeLabel);
        
        HtmlOutputText creationTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.creationTime}", Date.class));
        DateTimeConverter creationTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationTimeValueConverter.setPattern("dd/MM/yyyy");
        creationTimeValue.setConverter(creationTimeValueConverter);
        htmlPanelGrid.getChildren().add(creationTimeValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.createdBy}", User.class));
        createdByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText codeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeLabel.setId("codeLabel");
        codeLabel.setValue("Code:   ");
        htmlPanelGrid.getChildren().add(codeLabel);
        
        HtmlOutputText codeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeValue.setId("codeValue");
        codeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{courseBean.course.code}", String.class));
        htmlPanelGrid.getChildren().add(codeValue);
        
        HtmlOutputText lectureNotesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lectureNotesLabel.setId("lectureNotesLabel");
        lectureNotesLabel.setValue("Lecture Notes:   ");
        htmlPanelGrid.getChildren().add(lectureNotesLabel);
        
        HtmlOutputText lectureNotesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lectureNotesValue.setId("lectureNotesValue");
        lectureNotesValue.setValue("This relationship is managed from the LectureNote side");
        htmlPanelGrid.getChildren().add(lectureNotesValue);
        
        HtmlOutputText studentsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsLabel.setId("studentsLabel");
        studentsLabel.setValue("Students:   ");
        htmlPanelGrid.getChildren().add(studentsLabel);
        
        HtmlOutputText studentsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentsValue.setId("studentsValue");
        studentsValue.setValue("This relationship is managed from the Student side");
        htmlPanelGrid.getChildren().add(studentsValue);
        
        return htmlPanelGrid;
    }
    
    public Course CourseBean.getCourse() {
        if (course == null) {
            course = new Course();
        }
        return course;
    }
    
    public void CourseBean.setCourse(Course course) {
        this.course = course;
    }
    
    public List<User> CourseBean.completeUpdatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<User> CourseBean.completeCreatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<LectureNote> CourseBean.getSelectedLectureNotes() {
        return selectedLectureNotes;
    }
    
    public void CourseBean.setSelectedLectureNotes(List<LectureNote> selectedLectureNotes) {
        if (selectedLectureNotes != null) {
            course.setLectureNotes(new HashSet<LectureNote>(selectedLectureNotes));
        }
        this.selectedLectureNotes = selectedLectureNotes;
    }
    
    public List<Student> CourseBean.getSelectedStudents() {
        return selectedStudents;
    }
    
    public void CourseBean.setSelectedStudents(List<Student> selectedStudents) {
        if (selectedStudents != null) {
            course.setStudents(new HashSet<Student>(selectedStudents));
        }
        this.selectedStudents = selectedStudents;
    }
    
    public String CourseBean.onEdit() {
        if (course != null && course.getLectureNotes() != null) {
            selectedLectureNotes = new ArrayList<LectureNote>(course.getLectureNotes());
        }
        if (course != null && course.getStudents() != null) {
            selectedStudents = new ArrayList<Student>(course.getStudents());
        }
        return null;
    }
    
    public boolean CourseBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CourseBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CourseBean.displayList() {
        createDialogVisible = false;
        findAllCourses();
        return "course";
    }
    
    public String CourseBean.displayCreateDialog() {
        course = new Course();
        createDialogVisible = true;
        return "course";
    }
    
    public String CourseBean.persist() {
        String message = "";
        if (course.getId() != null) {
            course.merge();
            message = "Successfully updated";
        } else {
            course.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCourses();
    }
    
    public String CourseBean.delete() {
        course.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCourses();
    }
    
    public void CourseBean.reset() {
        course = null;
        selectedLectureNotes = null;
        selectedStudents = null;
        createDialogVisible = false;
    }
    
    public void CourseBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
