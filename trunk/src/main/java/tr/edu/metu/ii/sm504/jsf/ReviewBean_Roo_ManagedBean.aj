// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tr.edu.metu.ii.sm504.jsf;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import tr.edu.metu.ii.sm504.domain.ProjectTeam;
import tr.edu.metu.ii.sm504.domain.Review;
import tr.edu.metu.ii.sm504.domain.Submission;
import tr.edu.metu.ii.sm504.domain.SubmissionActivity;
import tr.edu.metu.ii.sm504.domain.User;
import tr.edu.metu.ii.sm504.jsf.ReviewBean;
import tr.edu.metu.ii.sm504.jsf.converter.ProjectTeamConverter;
import tr.edu.metu.ii.sm504.jsf.converter.SubmissionActivityConverter;
import tr.edu.metu.ii.sm504.jsf.converter.SubmissionConverter;
import tr.edu.metu.ii.sm504.jsf.converter.UserConverter;

privileged aspect ReviewBean_Roo_ManagedBean {
    
    declare @type: ReviewBean: @ManagedBean(name = "reviewBean");
    
    declare @type: ReviewBean: @SessionScoped;
    
    private String ReviewBean.name = "Reviews";
    
    private Review ReviewBean.review;
    
    private List<Review> ReviewBean.allReviews;
    
    private boolean ReviewBean.dataVisible = false;
    
    private List<String> ReviewBean.columns;
    
    private HtmlPanelGrid ReviewBean.createPanelGrid;
    
    private HtmlPanelGrid ReviewBean.editPanelGrid;
    
    private HtmlPanelGrid ReviewBean.viewPanelGrid;
    
    private boolean ReviewBean.createDialogVisible = false;
    
    @PostConstruct
    public void ReviewBean.init() {
        columns = new ArrayList<String>();
        columns.add("updateTime");
        columns.add("creationTime");
    }
    
    public String ReviewBean.getName() {
        return name;
    }
    
    public List<String> ReviewBean.getColumns() {
        return columns;
    }
    
    public List<Review> ReviewBean.getAllReviews() {
        return allReviews;
    }
    
    public void ReviewBean.setAllReviews(List<Review> allReviews) {
        this.allReviews = allReviews;
    }
    
    public String ReviewBean.findAllReviews() {
        allReviews = Review.findAllReviews();
        dataVisible = !allReviews.isEmpty();
        return null;
    }
    
    public boolean ReviewBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ReviewBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ReviewBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ReviewBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ReviewBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ReviewBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ReviewBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void ReviewBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ReviewBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeCreateOutput.setId("updateTimeCreateOutput");
        updateTimeCreateOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeCreateOutput);
        
        Calendar updateTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeCreateInput.setId("updateTimeCreateInput");
        updateTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.updateTime}", Date.class));
        updateTimeCreateInput.setNavigator(true);
        updateTimeCreateInput.setEffect("slideDown");
        updateTimeCreateInput.setPattern("dd/MM/yyyy");
        updateTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeCreateInput);
        
        Message updateTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeCreateInputMessage.setId("updateTimeCreateInputMessage");
        updateTimeCreateInputMessage.setFor("updateTimeCreateInput");
        updateTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeCreateInputMessage);
        
        HtmlOutputText updatedByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByCreateOutput.setId("updatedByCreateOutput");
        updatedByCreateOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByCreateOutput);
        
        AutoComplete updatedByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByCreateInput.setId("updatedByCreateInput");
        updatedByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.updatedBy}", User.class));
        updatedByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByCreateInput.setDropdown(true);
        updatedByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByCreateInput.setConverter(new UserConverter());
        updatedByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByCreateInput);
        
        Message updatedByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByCreateInputMessage.setId("updatedByCreateInputMessage");
        updatedByCreateInputMessage.setFor("updatedByCreateInput");
        updatedByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByCreateInputMessage);
        
        HtmlOutputText creationTimeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeCreateOutput.setId("creationTimeCreateOutput");
        creationTimeCreateOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeCreateOutput);
        
        Calendar creationTimeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeCreateInput.setId("creationTimeCreateInput");
        creationTimeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.creationTime}", Date.class));
        creationTimeCreateInput.setNavigator(true);
        creationTimeCreateInput.setEffect("slideDown");
        creationTimeCreateInput.setPattern("dd/MM/yyyy");
        creationTimeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeCreateInput);
        
        Message creationTimeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeCreateInputMessage.setId("creationTimeCreateInputMessage");
        creationTimeCreateInputMessage.setFor("creationTimeCreateInput");
        creationTimeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.createdBy}", User.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByCreateInput.setConverter(new UserConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        HtmlOutputText projectTeamCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectTeamCreateOutput.setId("projectTeamCreateOutput");
        projectTeamCreateOutput.setValue("Project Team: * ");
        htmlPanelGrid.getChildren().add(projectTeamCreateOutput);
        
        AutoComplete projectTeamCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectTeamCreateInput.setId("projectTeamCreateInput");
        projectTeamCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.projectTeam}", ProjectTeam.class));
        projectTeamCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeProjectTeam}", List.class, new Class[] { String.class }));
        projectTeamCreateInput.setDropdown(true);
        projectTeamCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "projectTeam", String.class));
        projectTeamCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{projectTeam.updateTime} #{projectTeam.creationTime}", String.class));
        projectTeamCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{projectTeam}", ProjectTeam.class));
        projectTeamCreateInput.setConverter(new ProjectTeamConverter());
        projectTeamCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(projectTeamCreateInput);
        
        Message projectTeamCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectTeamCreateInputMessage.setId("projectTeamCreateInputMessage");
        projectTeamCreateInputMessage.setFor("projectTeamCreateInput");
        projectTeamCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectTeamCreateInputMessage);
        
        HtmlOutputText submissionActivityCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionActivityCreateOutput.setId("submissionActivityCreateOutput");
        submissionActivityCreateOutput.setValue("Submission Activity: * ");
        htmlPanelGrid.getChildren().add(submissionActivityCreateOutput);
        
        AutoComplete submissionActivityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        submissionActivityCreateInput.setId("submissionActivityCreateInput");
        submissionActivityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.submissionActivity}", SubmissionActivity.class));
        submissionActivityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeSubmissionActivity}", List.class, new Class[] { String.class }));
        submissionActivityCreateInput.setDropdown(true);
        submissionActivityCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "submissionActivity", String.class));
        submissionActivityCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{submissionActivity.updateTime} #{submissionActivity.creationTime}", String.class));
        submissionActivityCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{submissionActivity}", SubmissionActivity.class));
        submissionActivityCreateInput.setConverter(new SubmissionActivityConverter());
        submissionActivityCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(submissionActivityCreateInput);
        
        Message submissionActivityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        submissionActivityCreateInputMessage.setId("submissionActivityCreateInputMessage");
        submissionActivityCreateInputMessage.setFor("submissionActivityCreateInput");
        submissionActivityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(submissionActivityCreateInputMessage);
        
        HtmlOutputText submissionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionCreateOutput.setId("submissionCreateOutput");
        submissionCreateOutput.setValue("Submission: * ");
        htmlPanelGrid.getChildren().add(submissionCreateOutput);
        
        AutoComplete submissionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        submissionCreateInput.setId("submissionCreateInput");
        submissionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.submission}", Submission.class));
        submissionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeSubmission}", List.class, new Class[] { String.class }));
        submissionCreateInput.setDropdown(true);
        submissionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "submission", String.class));
        submissionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{submission.updateTime} #{submission.creationTime}", String.class));
        submissionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{submission}", Submission.class));
        submissionCreateInput.setConverter(new SubmissionConverter());
        submissionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(submissionCreateInput);
        
        Message submissionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        submissionCreateInputMessage.setId("submissionCreateInputMessage");
        submissionCreateInputMessage.setFor("submissionCreateInput");
        submissionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(submissionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ReviewBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeEditOutput.setId("updateTimeEditOutput");
        updateTimeEditOutput.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeEditOutput);
        
        Calendar updateTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateTimeEditInput.setId("updateTimeEditInput");
        updateTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.updateTime}", Date.class));
        updateTimeEditInput.setNavigator(true);
        updateTimeEditInput.setEffect("slideDown");
        updateTimeEditInput.setPattern("dd/MM/yyyy");
        updateTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateTimeEditInput);
        
        Message updateTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateTimeEditInputMessage.setId("updateTimeEditInputMessage");
        updateTimeEditInputMessage.setFor("updateTimeEditInput");
        updateTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateTimeEditInputMessage);
        
        HtmlOutputText updatedByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByEditOutput.setId("updatedByEditOutput");
        updatedByEditOutput.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByEditOutput);
        
        AutoComplete updatedByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        updatedByEditInput.setId("updatedByEditInput");
        updatedByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.updatedBy}", User.class));
        updatedByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeUpdatedBy}", List.class, new Class[] { String.class }));
        updatedByEditInput.setDropdown(true);
        updatedByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "updatedBy", String.class));
        updatedByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{updatedBy.updateTime} #{updatedBy.creationTime} #{updatedBy.username} #{updatedBy.name}", String.class));
        updatedByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{updatedBy}", User.class));
        updatedByEditInput.setConverter(new UserConverter());
        updatedByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedByEditInput);
        
        Message updatedByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedByEditInputMessage.setId("updatedByEditInputMessage");
        updatedByEditInputMessage.setFor("updatedByEditInput");
        updatedByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedByEditInputMessage);
        
        HtmlOutputText creationTimeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeEditOutput.setId("creationTimeEditOutput");
        creationTimeEditOutput.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeEditOutput);
        
        Calendar creationTimeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationTimeEditInput.setId("creationTimeEditInput");
        creationTimeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.creationTime}", Date.class));
        creationTimeEditInput.setNavigator(true);
        creationTimeEditInput.setEffect("slideDown");
        creationTimeEditInput.setPattern("dd/MM/yyyy");
        creationTimeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(creationTimeEditInput);
        
        Message creationTimeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationTimeEditInputMessage.setId("creationTimeEditInputMessage");
        creationTimeEditInputMessage.setFor("creationTimeEditInput");
        creationTimeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationTimeEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.createdBy}", User.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.updateTime} #{createdBy.creationTime} #{createdBy.username} #{createdBy.name}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", User.class));
        createdByEditInput.setConverter(new UserConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        HtmlOutputText projectTeamEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectTeamEditOutput.setId("projectTeamEditOutput");
        projectTeamEditOutput.setValue("Project Team: * ");
        htmlPanelGrid.getChildren().add(projectTeamEditOutput);
        
        AutoComplete projectTeamEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        projectTeamEditInput.setId("projectTeamEditInput");
        projectTeamEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.projectTeam}", ProjectTeam.class));
        projectTeamEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeProjectTeam}", List.class, new Class[] { String.class }));
        projectTeamEditInput.setDropdown(true);
        projectTeamEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "projectTeam", String.class));
        projectTeamEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{projectTeam.updateTime} #{projectTeam.creationTime}", String.class));
        projectTeamEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{projectTeam}", ProjectTeam.class));
        projectTeamEditInput.setConverter(new ProjectTeamConverter());
        projectTeamEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(projectTeamEditInput);
        
        Message projectTeamEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        projectTeamEditInputMessage.setId("projectTeamEditInputMessage");
        projectTeamEditInputMessage.setFor("projectTeamEditInput");
        projectTeamEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(projectTeamEditInputMessage);
        
        HtmlOutputText submissionActivityEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionActivityEditOutput.setId("submissionActivityEditOutput");
        submissionActivityEditOutput.setValue("Submission Activity: * ");
        htmlPanelGrid.getChildren().add(submissionActivityEditOutput);
        
        AutoComplete submissionActivityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        submissionActivityEditInput.setId("submissionActivityEditInput");
        submissionActivityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.submissionActivity}", SubmissionActivity.class));
        submissionActivityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeSubmissionActivity}", List.class, new Class[] { String.class }));
        submissionActivityEditInput.setDropdown(true);
        submissionActivityEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "submissionActivity", String.class));
        submissionActivityEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{submissionActivity.updateTime} #{submissionActivity.creationTime}", String.class));
        submissionActivityEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{submissionActivity}", SubmissionActivity.class));
        submissionActivityEditInput.setConverter(new SubmissionActivityConverter());
        submissionActivityEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(submissionActivityEditInput);
        
        Message submissionActivityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        submissionActivityEditInputMessage.setId("submissionActivityEditInputMessage");
        submissionActivityEditInputMessage.setFor("submissionActivityEditInput");
        submissionActivityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(submissionActivityEditInputMessage);
        
        HtmlOutputText submissionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionEditOutput.setId("submissionEditOutput");
        submissionEditOutput.setValue("Submission: * ");
        htmlPanelGrid.getChildren().add(submissionEditOutput);
        
        AutoComplete submissionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        submissionEditInput.setId("submissionEditInput");
        submissionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.submission}", Submission.class));
        submissionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{reviewBean.completeSubmission}", List.class, new Class[] { String.class }));
        submissionEditInput.setDropdown(true);
        submissionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "submission", String.class));
        submissionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{submission.updateTime} #{submission.creationTime}", String.class));
        submissionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{submission}", Submission.class));
        submissionEditInput.setConverter(new SubmissionConverter());
        submissionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(submissionEditInput);
        
        Message submissionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        submissionEditInputMessage.setId("submissionEditInputMessage");
        submissionEditInputMessage.setFor("submissionEditInput");
        submissionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(submissionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ReviewBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText updateTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeLabel.setId("updateTimeLabel");
        updateTimeLabel.setValue("Update Time:   ");
        htmlPanelGrid.getChildren().add(updateTimeLabel);
        
        HtmlOutputText updateTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.updateTime}", Date.class));
        DateTimeConverter updateTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updateTimeValueConverter.setPattern("dd/MM/yyyy");
        updateTimeValue.setConverter(updateTimeValueConverter);
        htmlPanelGrid.getChildren().add(updateTimeValue);
        
        HtmlOutputText updatedByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByLabel.setId("updatedByLabel");
        updatedByLabel.setValue("Updated By:   ");
        htmlPanelGrid.getChildren().add(updatedByLabel);
        
        HtmlOutputText updatedByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.updatedBy}", User.class));
        updatedByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(updatedByValue);
        
        HtmlOutputText creationTimeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeLabel.setId("creationTimeLabel");
        creationTimeLabel.setValue("Creation Time:   ");
        htmlPanelGrid.getChildren().add(creationTimeLabel);
        
        HtmlOutputText creationTimeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationTimeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.creationTime}", Date.class));
        DateTimeConverter creationTimeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationTimeValueConverter.setPattern("dd/MM/yyyy");
        creationTimeValue.setConverter(creationTimeValueConverter);
        htmlPanelGrid.getChildren().add(creationTimeValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.createdBy}", User.class));
        createdByValue.setConverter(new UserConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        HtmlOutputText projectTeamLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectTeamLabel.setId("projectTeamLabel");
        projectTeamLabel.setValue("Project Team:   ");
        htmlPanelGrid.getChildren().add(projectTeamLabel);
        
        HtmlOutputText projectTeamValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        projectTeamValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.projectTeam}", ProjectTeam.class));
        projectTeamValue.setConverter(new ProjectTeamConverter());
        htmlPanelGrid.getChildren().add(projectTeamValue);
        
        HtmlOutputText submissionActivityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionActivityLabel.setId("submissionActivityLabel");
        submissionActivityLabel.setValue("Submission Activity:   ");
        htmlPanelGrid.getChildren().add(submissionActivityLabel);
        
        HtmlOutputText submissionActivityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionActivityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.submissionActivity}", SubmissionActivity.class));
        submissionActivityValue.setConverter(new SubmissionActivityConverter());
        htmlPanelGrid.getChildren().add(submissionActivityValue);
        
        HtmlOutputText submissionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionLabel.setId("submissionLabel");
        submissionLabel.setValue("Submission:   ");
        htmlPanelGrid.getChildren().add(submissionLabel);
        
        HtmlOutputText submissionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        submissionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{reviewBean.review.submission}", Submission.class));
        submissionValue.setConverter(new SubmissionConverter());
        htmlPanelGrid.getChildren().add(submissionValue);
        
        return htmlPanelGrid;
    }
    
    public Review ReviewBean.getReview() {
        if (review == null) {
            review = new Review();
        }
        return review;
    }
    
    public void ReviewBean.setReview(Review review) {
        this.review = review;
    }
    
    public List<User> ReviewBean.completeUpdatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<User> ReviewBean.completeCreatedBy(String query) {
        List<User> suggestions = new ArrayList<User>();
        for (User user : User.findAllUsers()) {
            String userStr = String.valueOf(user.getUpdateTime() +  " "  + user.getCreationTime() +  " "  + user.getUsername() +  " "  + user.getName());
            if (userStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(user);
            }
        }
        return suggestions;
    }
    
    public List<ProjectTeam> ReviewBean.completeProjectTeam(String query) {
        List<ProjectTeam> suggestions = new ArrayList<ProjectTeam>();
        for (ProjectTeam projectTeam : ProjectTeam.findAllProjectTeams()) {
            String projectTeamStr = String.valueOf(projectTeam.getUpdateTime() +  " "  + projectTeam.getCreationTime());
            if (projectTeamStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(projectTeam);
            }
        }
        return suggestions;
    }
    
    public List<SubmissionActivity> ReviewBean.completeSubmissionActivity(String query) {
        List<SubmissionActivity> suggestions = new ArrayList<SubmissionActivity>();
        for (SubmissionActivity submissionActivity : SubmissionActivity.findAllSubmissionActivitys()) {
            String submissionActivityStr = String.valueOf(submissionActivity.getUpdateTime() +  " "  + submissionActivity.getCreationTime());
            if (submissionActivityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(submissionActivity);
            }
        }
        return suggestions;
    }
    
    public List<Submission> ReviewBean.completeSubmission(String query) {
        List<Submission> suggestions = new ArrayList<Submission>();
        for (Submission submission : Submission.findAllSubmissions()) {
            String submissionStr = String.valueOf(submission.getUpdateTime() +  " "  + submission.getCreationTime());
            if (submissionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(submission);
            }
        }
        return suggestions;
    }
    
    public String ReviewBean.onEdit() {
        return null;
    }
    
    public boolean ReviewBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ReviewBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ReviewBean.displayList() {
        createDialogVisible = false;
        findAllReviews();
        return "review";
    }
    
    public String ReviewBean.displayCreateDialog() {
        review = new Review();
        createDialogVisible = true;
        return "review";
    }
    
    public String ReviewBean.persist() {
        String message = "";
        if (review.getId() != null) {
            review.merge();
            message = "Successfully updated";
        } else {
            review.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllReviews();
    }
    
    public String ReviewBean.delete() {
        review.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllReviews();
    }
    
    public void ReviewBean.reset() {
        review = null;
        createDialogVisible = false;
    }
    
    public void ReviewBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
